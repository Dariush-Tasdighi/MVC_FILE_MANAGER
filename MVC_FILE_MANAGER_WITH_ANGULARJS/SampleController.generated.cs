// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace MVC_FILE_MANAGER_WITH_ANGULARJS.Controllers
{
	public partial class SampleController
	{
		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		protected SampleController(Dummy d) { }

		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		protected RedirectToRouteResult RedirectToAction(ActionResult result)
		{
			var callInfo = result.GetT4MVCResult();
			return RedirectToRoute(callInfo.RouteValueDictionary);
		}

		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
		{
			return RedirectToAction(taskResult.Result);
		}

		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
		{
			var callInfo = result.GetT4MVCResult();
			return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
		}

		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
		{
			return RedirectToActionPermanent(taskResult.Result);
		}

		[NonAction]
		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		public virtual System.Web.Mvc.JsonResult UploadFile()
		{
			return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.UploadFile);
		}
		[NonAction]
		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		public virtual System.Web.Mvc.JsonResult DeleteDirectoriesAndFiles()
		{
			return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.DeleteDirectoriesAndFiles);
		}
		[NonAction]
		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		public virtual System.Web.Mvc.ActionResult Download()
		{
			return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Download);
		}
		[NonAction]
		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		public virtual System.Web.Mvc.JsonResult Compress()
		{
			return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.Compress);
		}
		[NonAction]
		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		public virtual System.Web.Mvc.JsonResult Decompress()
		{
			return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.Decompress);
		}
		[NonAction]
		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		public virtual System.Web.Mvc.JsonResult CreateDirectory()
		{
			return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.CreateDirectory);
		}
		[NonAction]
		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		public virtual System.Web.Mvc.JsonResult Rename()
		{
			return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.Rename);
		}

		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		public SampleController Actions { get { return MVC.Sample; } }
		[GeneratedCode("T4MVC", "2.0")]
		public readonly string Area = "";
		[GeneratedCode("T4MVC", "2.0")]
		public readonly string Name = "Sample";
		[GeneratedCode("T4MVC", "2.0")]
		public const string NameConst = "Sample";
		[GeneratedCode("T4MVC", "2.0")]
		static readonly ActionNamesClass s_actions = new ActionNamesClass();
		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		public ActionNamesClass ActionNames { get { return s_actions; } }
		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		public class ActionNamesClass
		{
			public readonly string Index = "Index";
			public readonly string UploadFile = "UploadFile";
			public readonly string DeleteDirectoriesAndFiles = "DeleteDirectoriesAndFiles";
			public readonly string Download = "Download";
			public readonly string GetDirectoriesAndFiles = "GetDirectoriesAndFiles";
			public readonly string Compress = "Compress";
			public readonly string Decompress = "Decompress";
			public readonly string CreateDirectory = "CreateDirectory";
			public readonly string Rename = "Rename";
		}

		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		public class ActionNameConstants
		{
			public const string Index = "Index";
			public const string UploadFile = "UploadFile";
			public const string DeleteDirectoriesAndFiles = "DeleteDirectoriesAndFiles";
			public const string Download = "Download";
			public const string GetDirectoriesAndFiles = "GetDirectoriesAndFiles";
			public const string Compress = "Compress";
			public const string Decompress = "Decompress";
			public const string CreateDirectory = "CreateDirectory";
			public const string Rename = "Rename";
		}


		static readonly ActionParamsClass_UploadFile s_params_UploadFile = new ActionParamsClass_UploadFile();
		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		public ActionParamsClass_UploadFile UploadFileParams { get { return s_params_UploadFile; } }
		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		public class ActionParamsClass_UploadFile
		{
			public readonly string path = "path";
		}
		static readonly ActionParamsClass_DeleteDirectoriesAndFiles s_params_DeleteDirectoriesAndFiles = new ActionParamsClass_DeleteDirectoriesAndFiles();
		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		public ActionParamsClass_DeleteDirectoriesAndFiles DeleteDirectoriesAndFilesParams { get { return s_params_DeleteDirectoriesAndFiles; } }
		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		public class ActionParamsClass_DeleteDirectoriesAndFiles
		{
			public readonly string viewModel = "viewModel";
		}
		static readonly ActionParamsClass_Download s_params_Download = new ActionParamsClass_Download();
		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		public ActionParamsClass_Download DownloadParams { get { return s_params_Download; } }
		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		public class ActionParamsClass_Download
		{
			public readonly string path = "path";
			public readonly string fileName = "fileName";
		}
		static readonly ActionParamsClass_GetDirectoriesAndFiles s_params_GetDirectoriesAndFiles = new ActionParamsClass_GetDirectoriesAndFiles();
		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		public ActionParamsClass_GetDirectoriesAndFiles GetDirectoriesAndFilesParams { get { return s_params_GetDirectoriesAndFiles; } }
		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		public class ActionParamsClass_GetDirectoriesAndFiles
		{
			public readonly string path = "path";
		}
		static readonly ActionParamsClass_Compress s_params_Compress = new ActionParamsClass_Compress();
		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		public ActionParamsClass_Compress CompressParams { get { return s_params_Compress; } }
		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		public class ActionParamsClass_Compress
		{
			public readonly string viewModel = "viewModel";
		}
		static readonly ActionParamsClass_Decompress s_params_Decompress = new ActionParamsClass_Decompress();
		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		public ActionParamsClass_Decompress DecompressParams { get { return s_params_Decompress; } }
		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		public class ActionParamsClass_Decompress
		{
			public readonly string viewModel = "viewModel";
		}
		static readonly ActionParamsClass_CreateDirectory s_params_CreateDirectory = new ActionParamsClass_CreateDirectory();
		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		public ActionParamsClass_CreateDirectory CreateDirectoryParams { get { return s_params_CreateDirectory; } }
		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		public class ActionParamsClass_CreateDirectory
		{
			public readonly string path = "path";
			public readonly string directoryName = "directoryName";
		}
		static readonly ActionParamsClass_Rename s_params_Rename = new ActionParamsClass_Rename();
		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		public ActionParamsClass_Rename RenameParams { get { return s_params_Rename; } }
		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		public class ActionParamsClass_Rename
		{
			public readonly string path = "path";
			public readonly string oldName = "oldName";
			public readonly string newName = "newName";
		}
		static readonly ViewsClass s_views = new ViewsClass();
		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		public ViewsClass Views { get { return s_views; } }
		[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
		public class ViewsClass
		{
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string Index = "Index";
            }
            public readonly string Index = "~/Views/Sample/Index.cshtml";
		}
	}

	[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
	public partial class T4MVC_SampleController : MVC_FILE_MANAGER_WITH_ANGULARJS.Controllers.SampleController
	{
		public T4MVC_SampleController() : base(Dummy.Instance) { }

		[NonAction]
		partial void IndexOverride(T4MVC_System_Web_Mvc_ViewResult callInfo);

		[NonAction]
		public override System.Web.Mvc.ViewResult Index()
		{
			var callInfo = new T4MVC_System_Web_Mvc_ViewResult(Area, Name, ActionNames.Index);
			IndexOverride(callInfo);
			return callInfo;
		}

		[NonAction]
		partial void UploadFileOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string path);

		[NonAction]
		public override System.Web.Mvc.JsonResult UploadFile(string path)
		{
			var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.UploadFile);
			ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "path", path);
			UploadFileOverride(callInfo, path);
			return callInfo;
		}

		[NonAction]
		partial void DeleteDirectoriesAndFilesOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, MvcFileManager.ViewModels.PathAndDirectoriesAndFilesViewModel viewModel);

		[NonAction]
		public override System.Web.Mvc.JsonResult DeleteDirectoriesAndFiles(MvcFileManager.ViewModels.PathAndDirectoriesAndFilesViewModel viewModel)
		{
			var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.DeleteDirectoriesAndFiles);
			ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "viewModel", viewModel);
			DeleteDirectoriesAndFilesOverride(callInfo, viewModel);
			return callInfo;
		}

		[NonAction]
		partial void DownloadOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string path, string fileName);

		[NonAction]
		public override System.Web.Mvc.ActionResult Download(string path, string fileName)
		{
			var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Download);
			ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "path", path);
			ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "fileName", fileName);
			DownloadOverride(callInfo, path, fileName);
			return callInfo;
		}

		[NonAction]
		partial void GetDirectoriesAndFilesOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string path);

		[NonAction]
		public override System.Web.Mvc.JsonResult GetDirectoriesAndFiles(string path)
		{
			var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetDirectoriesAndFiles);
			ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "path", path);
			GetDirectoriesAndFilesOverride(callInfo, path);
			return callInfo;
		}

		[NonAction]
		partial void CompressOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, MvcFileManager.ViewModels.PathAndDirectoriesAndFilesAndFileNameViewModel viewModel);

		[NonAction]
		public override System.Web.Mvc.JsonResult Compress(MvcFileManager.ViewModels.PathAndDirectoriesAndFilesAndFileNameViewModel viewModel)
		{
			var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.Compress);
			ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "viewModel", viewModel);
			CompressOverride(callInfo, viewModel);
			return callInfo;
		}

		[NonAction]
		partial void DecompressOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, MvcFileManager.ViewModels.PathAndDirectoriesAndFilesViewModel viewModel);

		[NonAction]
		public override System.Web.Mvc.JsonResult Decompress(MvcFileManager.ViewModels.PathAndDirectoriesAndFilesViewModel viewModel)
		{
			var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.Decompress);
			ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "viewModel", viewModel);
			DecompressOverride(callInfo, viewModel);
			return callInfo;
		}

		[NonAction]
		partial void CreateDirectoryOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string path, string directoryName);

		[NonAction]
		public override System.Web.Mvc.JsonResult CreateDirectory(string path, string directoryName)
		{
			var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.CreateDirectory);
			ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "path", path);
			ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "directoryName", directoryName);
			CreateDirectoryOverride(callInfo, path, directoryName);
			return callInfo;
		}

		[NonAction]
		partial void RenameOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string path, string oldName, string newName);

		[NonAction]
		public override System.Web.Mvc.JsonResult Rename(string path, string oldName, string newName)
		{
			var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.Rename);
			ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "path", path);
			ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "oldName", oldName);
			ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "newName", newName);
			RenameOverride(callInfo, path, oldName, newName);
			return callInfo;
		}

	}
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
